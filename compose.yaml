secrets:
  beam_token:
    environment: "BEAM_CLOUD_DEFAULT_TOKEN"
  aws_access_key_id:
    environment: "AWS_ACCESS_KEY_ID"
  aws_secret_access_key:
    environment: "AWS_SECRET_ACCESS_KEY"
  aws_region:
    environment: "AWS_REGION"

services:
  web:
    build:
      dockerfile: web.Dockerfile
    ports:
      - "3000:3000"
    depends_on: # Add new services here
      - midi-generator
      - users
      - yt-downloader
    develop:
      watch:
        - action: sync
          path: ./web
          target: /app
          ignore:
            - node_modules/
            - ydl_api/
            - params/
            - logs/
            - downloads/
            - data/
        - action: rebuild
          path: ./web/package.json

  midi-generator:
    env_file: ".env"
    environment:
      DB_HOST: midi-generator-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: midi-generator
    build:
      dockerfile: midi-generator.Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - midi-generator-db
    develop:
      watch:
        - action: sync
          path: ./services/midi-generator
          target: /app
          ignore:
            - venv/
        - action: rebuild
          path: ./services/midi-generator/requirements.txt

  midi-generator-db:
    image: postgres:13
    environment:
      POSTGRES_DB: midi-generator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"

  users:
    build:
      dockerfile: users.Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - users-db
    develop:
      watch:
        - action: sync
          path: ./services/users
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./services/users/package.json

  users-db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    ports:
      - "5433:5433"

  yt-downloader:
    build:
      dockerfile: yt-downloader.Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - ydl_api_ng
    develop:
      watch:
        - action: sync
          path: ./services/yt-downloader
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./services/yt-downloader/package.json
    networks:
      - ydl_api_ng

  ydl_api_ng:
    container_name: ydl_api_ng
    image: totonyus/ydl_api_ng
    restart: unless-stopped
    depends_on:
      - ydl_api_ng_redis
    ports:
      - 5011:80
    volumes:
      - ./services/yt-downloader/params:/app/params
      - ./services/yt-downloader/logs:/app/logs
      - ./services/yt-downloader/downloads:/app/downloads
      - ./services/yt-downloader/data:/app/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - UID=1000
      - GID=1000
      - NB_WORKERS=5
      - LOG_LEVEL=error
      # Redis will be disable is this value is not false, remember to also change the setting in params.ini file
      - DISABLE_REDIS=false
    networks:
      - ydl_api_ng

  ydl_api_ng_redis:
    container_name: ydl_api_ng_redis
    image: redis
    restart: unless-stopped
    networks:
      - ydl_api_ng
    volumes:
      - /etc/localtime:/etc/localtime:ro
  
  broker:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3

networks:
  ydl_api_ng:
